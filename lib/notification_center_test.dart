import 'package:flutter/material.dart';
import 'notification_center_service.dart';
import 'notification_center_models.dart';

/// Script de prueba para el centro de notificaciones
class NotificationCenterTestScript {
  
  /// Ejecutar todas las pruebas del centro de notificaciones
  static Future<void> runAllTests() async {
    debugPrint('üß™ === INICIANDO PRUEBAS DEL CENTRO DE NOTIFICACIONES ===');
    
    try {
      await testBasicOperations();
      await testNotificationTypes();
      await testPersistence();
      await testStatistics();
      
      debugPrint('‚úÖ === TODAS LAS PRUEBAS COMPLETADAS EXITOSAMENTE ===');
    } catch (e) {
      debugPrint('‚ùå Error en las pruebas: $e');
    }
  }

  /// Probar operaciones b√°sicas del centro
  static Future<void> testBasicOperations() async {
    debugPrint('üß™ Probando operaciones b√°sicas...');
    
    final service = NotificationCenterService.instance;
    
    // Limpiar para empezar fresh
    await service.deleteAllNotifications();
    
    // Agregar notificaci√≥n de prueba
    await service.addNotification(
      title: 'üß™ Notificaci√≥n de Prueba',
      body: 'Esta es una notificaci√≥n de prueba del sistema',
      type: NotificationType.general,
      payload: 'test_payload',
    );
    
    assert(service.notifications.length == 1, 'Deber√≠a haber 1 notificaci√≥n');
    assert(service.unreadCount == 1, 'Deber√≠a haber 1 notificaci√≥n no le√≠da');
    
    // Marcar como le√≠da
    final notificationId = service.notifications.first.id;
    await service.markAsRead(notificationId);
    
    assert(service.unreadCount == 0, 'No deber√≠a haber notificaciones no le√≠das');
    assert(service.notifications.first.isRead, 'La notificaci√≥n deber√≠a estar marcada como le√≠da');
    
    debugPrint('‚úÖ Operaciones b√°sicas funcionando correctamente');
  }

  /// Probar diferentes tipos de notificaciones
  static Future<void> testNotificationTypes() async {
    debugPrint('üß™ Probando tipos de notificaciones...');
    
    final service = NotificationCenterService.instance;
    await service.deleteAllNotifications();
    
    // Agregar una notificaci√≥n de cada tipo
    for (final type in NotificationType.values) {
      await service.addNotification(
        title: '${type.icon} ${type.displayName}',
        body: 'Notificaci√≥n de prueba de tipo ${type.displayName}',
        type: type,
      );
    }
    
    assert(service.notifications.length == NotificationType.values.length, 
           'Deber√≠a haber ${NotificationType.values.length} notificaciones');
    
    // Verificar que cada tipo est√° presente
    for (final type in NotificationType.values) {
      final typeNotifications = service.getNotificationsByType(type);
      assert(typeNotifications.isNotEmpty, 'Deber√≠a haber notificaciones de tipo ${type.displayName}');
    }
    
    debugPrint('‚úÖ Tipos de notificaciones funcionando correctamente');
  }

  /// Probar persistencia de datos
  static Future<void> testPersistence() async {
    debugPrint('üß™ Probando persistencia de datos...');
    
    final service = NotificationCenterService.instance;
    await service.deleteAllNotifications();
    
    // Agregar notificaciones de prueba
    await service.addNotification(
      title: 'üíæ Prueba de Persistencia 1',
      body: 'Esta notificaci√≥n deber√≠a persistir despu√©s del reinicio',
      type: NotificationType.system,
    );
    
    await service.addNotification(
      title: 'üíæ Prueba de Persistencia 2',
      body: 'Esta tambi√©n deber√≠a persistir',
      type: NotificationType.general,
    );
    
    final countBefore = service.notifications.length;
    
    // Simular reinicio reinicializando el servicio
    await service.init();
    
    final countAfter = service.notifications.length;
    
    assert(countBefore == countAfter, 
           'El n√∫mero de notificaciones deber√≠a ser el mismo despu√©s del reinicio');
    
    debugPrint('‚úÖ Persistencia de datos funcionando correctamente');
  }

  /// Probar estad√≠sticas del centro
  static Future<void> testStatistics() async {
    debugPrint('üß™ Probando estad√≠sticas...');
    
    final service = NotificationCenterService.instance;
    await service.deleteAllNotifications();
    
    // Agregar notificaciones variadas
    await service.addNotification(
      title: 'üìä Estad√≠stica 1',
      body: 'Notificaci√≥n no le√≠da',
      type: NotificationType.achievement,
    );
    
    await service.addNotification(
      title: 'üìä Estad√≠stica 2',
      body: 'Notificaci√≥n le√≠da',
      type: NotificationType.challenge,
    );
    
    // Marcar una como le√≠da
    await service.markAsRead(service.notifications.last.id);
    
    final stats = service.statistics;
    
    assert(stats['total'] == 2, 'Deber√≠a haber 2 notificaciones totales');
    assert(stats['unread'] == 1, 'Deber√≠a haber 1 notificaci√≥n no le√≠da');
    assert(stats['today'] == 2, 'Deber√≠a haber 2 notificaciones de hoy');
    
    debugPrint('‚úÖ Estad√≠sticas funcionando correctamente');
  }

  /// Agregar notificaciones de ejemplo para demostrar el sistema
  static Future<void> addDemoNotifications() async {
    debugPrint('üé≠ Agregando notificaciones de demostraci√≥n...');
    
    final service = NotificationCenterService.instance;
    
    final demoNotifications = [
      {
        'title': 'üéâ ¬°Felicidades!',
        'body': 'Has completado tu primer reto. ¬°Sigue as√≠!',
        'type': NotificationType.achievement,
      },
      {
        'title': 'üî• Racha de 7 d√≠as',
        'body': 'Tu reto "Ejercicio diario" lleva 7 d√≠as consecutivos',
        'type': NotificationType.challenge,
      },
      {
        'title': 'üìÖ Evento pr√≥ximo',
        'body': 'Tu evento "Reuni√≥n de trabajo" es en 30 minutos',
        'type': NotificationType.event,
      },
      {
        'title': 'üí™ Mensaje motivacional',
        'body': 'Cada peque√±o paso cuenta. ¬°No te rindas!',
        'type': NotificationType.motivation,
      },
      {
        'title': 'üõ°Ô∏è Ficha de perd√≥n utilizada',
        'body': 'Se us√≥ una ficha de perd√≥n para "Lectura diaria"',
        'type': NotificationType.challenge,
      },
      {
        'title': 'üé® Personalizaci√≥n disponible',
        'body': 'Configura tu estilo de planificaci√≥n para una mejor experiencia',
        'type': NotificationType.planning,
      },
      {
        'title': '‚öôÔ∏è Sistema actualizado',
        'body': 'La aplicaci√≥n se ha actualizado con nuevas funciones',
        'type': NotificationType.system,
      },
      {
        'title': '‚è∞ Recordatorio',
        'body': 'No olvides confirmar tus retos de hoy antes de las 23:59',
        'type': NotificationType.reminder,
      },
    ];

    for (int i = 0; i < demoNotifications.length; i++) {
      final notification = demoNotifications[i];
      
      await service.addNotification(
        title: notification['title'] as String,
        body: notification['body'] as String,
        type: notification['type'] as NotificationType,
        customId: 'demo_${i + 1}',
      );
      
      // Agregar un peque√±o delay entre notificaciones
      await Future.delayed(const Duration(milliseconds: 100));
    }
    
    // Marcar algunas como le√≠das para variar
    final notifications = service.notifications;
    if (notifications.length >= 4) {
      await service.markAsRead(notifications[1].id); // Segunda
      await service.markAsRead(notifications[3].id); // Cuarta
    }
    
    debugPrint('‚úÖ ${demoNotifications.length} notificaciones de demo agregadas');
  }

  /// Limpiar todas las notificaciones de prueba
  static Future<void> cleanupTestNotifications() async {
    debugPrint('üßπ Limpiando notificaciones de prueba...');
    
    final service = NotificationCenterService.instance;
    
    // Eliminar notificaciones que contengan "Prueba" o "demo" en el ID
    final toDelete = service.notifications.where((n) => 
        n.title.contains('üß™') || 
        n.title.contains('üíæ') || 
        n.title.contains('üìä') ||
        n.id.startsWith('demo_')
    ).toList();
    
    for (final notification in toDelete) {
      await service.deleteNotification(notification.id);
    }
    
    debugPrint('‚úÖ ${toDelete.length} notificaciones de prueba eliminadas');
  }

  /// Mostrar estad√≠sticas actuales
  static void showCurrentStats() {
    final service = NotificationCenterService.instance;
    final stats = service.statistics;
    
    debugPrint('üìä === ESTAD√çSTICAS ACTUALES ===');
    debugPrint('Total: ${stats['total']}');
    debugPrint('No le√≠das: ${stats['unread']}');
    debugPrint('Hoy: ${stats['today']}');
    debugPrint('Esta semana: ${stats['thisWeek']}');
    debugPrint('Por tipo:');
    
    final byType = stats['byType'] as Map<NotificationType, int>;
    for (final entry in byType.entries) {
      if (entry.value > 0) {
        debugPrint('  ${entry.key.displayName}: ${entry.value}');
      }
    }
    debugPrint('===========================');
  }
}

/// Extensi√≥n para ejecutar las pruebas desde cualquier lugar
extension NotificationCenterTesting on NotificationCenterService {
  
  /// M√©todo de conveniencia para ejecutar pruebas
  Future<void> runTests() async {
    await NotificationCenterTestScript.runAllTests();
  }
  
  /// M√©todo para agregar notificaciones de demo
  Future<void> addDemoData() async {
    await NotificationCenterTestScript.addDemoNotifications();
  }
  
  /// M√©todo para limpiar datos de prueba
  Future<void> cleanup() async {
    await NotificationCenterTestScript.cleanupTestNotifications();
  }
  
  /// Mostrar estad√≠sticas en consola
  void showStats() {
    NotificationCenterTestScript.showCurrentStats();
  }
}
