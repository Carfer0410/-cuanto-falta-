void main() {
  print('=== AN√ÅLISIS COMPLETO DEL FLUJO DE CONFIRMACI√ìN ===\n');
  
  // ========== ESCENARIO REAL ==========
  print('üéØ ESCENARIO REAL DEL USUARIO:');
  print('  ‚Ä¢ Reto creado: 20/07/2025');
  print('  ‚Ä¢ D√≠as transcurridos hasta HOY (22/07): 3 d√≠as'); 
  print('  ‚Ä¢ Reto es RETROACTIVO (ya hab√≠a d√≠as pasados cuando lo cre√≥)');
  print('  ‚Ä¢ Racha mostrada ANTES de confirmar: 2 d√≠as');
  print('  ‚Ä¢ ‚ùå PROBLEMA: Al confirmar HOY, la racha BAJ√ì en lugar de subir\n');
  
  // ========== AN√ÅLISIS MATEM√ÅTICO ==========
  print('üìä AN√ÅLISIS MATEM√ÅTICO:');
  print('  Si el reto se cre√≥ el 20/07 y estamos a 22/07:');
  print('  ‚úÖ 20/07: D√≠a 1 del reto');
  print('  ‚úÖ 21/07: D√≠a 2 del reto'); 
  print('  ‚úÖ 22/07: D√≠a 3 del reto (HOY)');
  print('  üìà Racha esperada despu√©s de confirmar: 3 d√≠as\n');
  
  // ========== HIP√ìTESIS DEL BUG ==========
  print('üîç HIP√ìTESIS DEL BUG:');
  print('  1. ¬øEst√° el confirmChallenge() borrando confirmaciones previas?');
  print('  2. ¬øHay alg√∫n reset que est√© limpiando el historial?');
  print('  3. ¬øEl bot√≥n est√° llamando a failChallenge() en lugar de confirmChallenge()?');
  print('  4. ¬øHay conflicto entre sistema de contadores y sistema de rachas?\n');
  
  // ========== SIMULACI√ìN DEL ESTADO ANTES ==========
  print('üíæ ESTADO ANTES DE CONFIRMAR (racha = 2 d√≠as):');
  final historialAntes = [
    DateTime(2025, 7, 20), // Confirmaci√≥n retroactiva d√≠a 1
    DateTime(2025, 7, 21), // Confirmaci√≥n retroactiva d√≠a 2
  ];
  
  print('  Confirmaciones existentes:');
  for (final conf in historialAntes) {
    print('    - ${conf.day}/${conf.month}: ‚úÖ');
  }
  print('  Racha calculada: ${calcularRacha(historialAntes)} d√≠as\n');
  
  // ========== SIMULACI√ìN DE CONFIRMAR HOY ==========
  print('‚ö° SIMULACI√ìN: Confirmar el 22/07 (HOY)');
  final hoy = DateTime(2025, 7, 22);
  final historialDespues = [...historialAntes, hoy];
  
  print('  Confirmaciones despu√©s de agregar HOY:');
  for (final conf in historialDespues) {
    print('    - ${conf.day}/${conf.month}: ‚úÖ');
  }
  final rachaDespues = calcularRacha(historialDespues);
  print('  Racha calculada: $rachaDespues d√≠as');
  
  if (rachaDespues > 2) {
    print('  ‚úÖ CORRECTO: La racha deber√≠a SUBIR a $rachaDespues d√≠as');
  } else {
    print('  ‚ùå BUG REPRODUCIDO: La racha no sube como esperado');
  }
  
  print('\n=== CONCLUSI√ìN ===');
  print('El algoritmo de c√°lculo es correcto.');
  print('El problema debe estar en:');
  print('  1. La funci√≥n confirmChallenge() est√° haciendo algo inesperado');
  print('  2. El bot√≥n no est√° llamando a confirmChallenge()'); 
  print('  3. Hay alg√∫n reset/limpieza que borra el historial');
  print('  4. Conflicto de sincronizaci√≥n con otros sistemas');
}

int calcularRacha(List<DateTime> confirmaciones) {
  if (confirmaciones.isEmpty) return 0;
  
  // Ordenar de m√°s reciente a m√°s antiguo
  final sorted = [...confirmaciones];
  sorted.sort((a, b) => b.compareTo(a));
  
  final hoy = DateTime(2025, 7, 22);
  int racha = 0;
  DateTime? esperada = DateTime(hoy.year, hoy.month, hoy.day);
  
  for (final conf in sorted) {
    final fechaConf = DateTime(conf.year, conf.month, conf.day);
    
    if (esperada != null && fechaConf.isAtSameMomentAs(esperada)) {
      racha++;
      esperada = esperada.subtract(Duration(days: 1));
    } else if (racha == 0) {
      // Primera confirmaci√≥n no es de hoy, empezar desde ah√≠
      racha = 1;
      esperada = fechaConf.subtract(Duration(days: 1));
    } else {
      // Hueco en racha, parar
      break;
    }
  }
  
  return racha;
}
