// Script para generar notificaci√≥n de prueba y verificar clasificaci√≥n
// Este script simula la creaci√≥n de una notificaci√≥n como la problem√°tica

import 'dart:convert';

// Enumerador copiado del proyecto
enum NotificationType {
  challenge,           
  event,              
  achievement,        
  reminder,           
  motivation,         
  system,             
  planning,           
  general,            
}

// Funci√≥n copiada del notification_service.dart actualizada
NotificationType _determineNotificationType(String title, String body, String? payload) {
  final titleLower = title.toLowerCase();
  final bodyLower = body.toLowerCase();
  
  // An√°lisis del payload si existe (PRIORIDAD M√ÅXIMA)
  String? payloadAction;
  if (payload != null && payload.isNotEmpty) {
    try {
      final payloadMap = jsonDecode(payload);
      payloadAction = payloadMap['action']?.toString().toLowerCase();
    } catch (e) {
      // Si el payload no es JSON v√°lido, lo ignoramos
    }
  }
  
  // Prioridad 1: Analizar el payload primero
  if (payloadAction != null) {
    if (payloadAction.contains('challenge') || payloadAction.contains('confirm')) {
      return NotificationType.challenge;
    }
    if (payloadAction.contains('event')) {
      return NotificationType.event;
    }
    if (payloadAction.contains('achievement')) {
      return NotificationType.achievement;
    }
    if (payloadAction.contains('reminder')) {
      return NotificationType.reminder;
    }
  }
  
  // 2. RETOS/CHALLENGES (prioridad ALTA - incluye confirmaciones y recordatorios)
  if (titleLower.contains('reto') || titleLower.contains('challenge') ||
      titleLower.contains('racha') || titleLower.contains('streak') ||
      bodyLower.contains('confirmar') || bodyLower.contains('confirm') ||
      bodyLower.contains('reto') || bodyLower.contains('challenge') ||
      titleLower.contains('üî•') || titleLower.contains('üí™') ||
      titleLower.contains('üõ°Ô∏è') || titleLower.contains('üíî') ||
      (bodyLower.contains('confirmar') && (bodyLower.contains('23:59') || bodyLower.contains('minutos'))) ||
      (titleLower.contains('√∫ltimos') && bodyLower.contains('confirmar'))) {
    return NotificationType.challenge;
  }
  
  // 3. LOGROS/ACHIEVEMENTS
  if (titleLower.contains('logro') || titleLower.contains('achievement') || 
      titleLower.contains('üéâ') || titleLower.contains('üèÜ')) {
    return NotificationType.achievement;
  }
  
  // 4. EVENTOS
  if (titleLower.contains('evento') || titleLower.contains('event') ||
      (titleLower.contains('üìÖ') && !bodyLower.contains('reto') && !bodyLower.contains('confirmar'))) {
    return NotificationType.event;
  }
  
  // Por defecto: general
  return NotificationType.general;
}

void main() {
  print('=== PRUEBA DE NOTIFICACI√ìN REAL ===\n');
  
  // Simulamos la notificaci√≥n exacta que genera ChallengeNotificationService
  final title = '‚è∞ ¬°√öltimos 29 minutos!';
  final body = 'Recuerda confirmar tu reto de meditaci√≥n antes de las 23:59. ¬°Mant√©n tu racha!';
  final payload = jsonEncode({
    "action": "challenge_confirmation",
    "challengeId": "meditation_challenge",
    "habitName": "meditaci√≥n",
    "dueTime": "23:59"
  });
  
  print('Notificaci√≥n a clasificar:');
  print('üì¢ T√≠tulo: $title');
  print('üìù Cuerpo: $body');
  print('üì¶ Payload: $payload');
  
  final result = _determineNotificationType(title, body, payload);
  
  print('\nüîç RESULTADO DE CLASIFICACI√ìN:');
  print('Tipo detectado: ${result.toString().split('.').last.toUpperCase()}');
  
  if (result == NotificationType.challenge) {
    print('‚úÖ CORRECTO: Se clasific√≥ como CHALLENGE');
    print('üéØ Esta notificaci√≥n deber√≠a aparecer en la pantalla de Retos');
  } else {
    print('‚ùå ERROR: Se clasific√≥ como ${result.toString().split('.').last.toUpperCase()}');
    print('‚ö†Ô∏è  Deber√≠a ser CHALLENGE pero se clasific√≥ incorrectamente');
  }
  
  print('\nüìä AN√ÅLISIS DEL PAYLOAD:');
  try {
    final payloadMap = jsonDecode(payload);
    final action = payloadMap['action']?.toString() ?? 'NO_ACTION';
    print('Action en payload: $action');
    print('¬øContiene "challenge"? ${action.toLowerCase().contains('challenge')}');
    print('¬øContiene "confirm"? ${action.toLowerCase().contains('confirm')}');
  } catch (e) {
    print('Error analizando payload: $e');
  }
  
  print('\nüìä AN√ÅLISIS DE TEXTO:');
  print('T√≠tulo contiene "√∫ltimos": ${title.toLowerCase().contains("√∫ltimos")}');
  print('Cuerpo contiene "confirmar": ${body.toLowerCase().contains("confirmar")}');
  print('Cuerpo contiene "reto": ${body.toLowerCase().contains("reto")}');
  
  print('\nüîß ESTADO DE LA CORRECCI√ìN:');
  print('La funci√≥n _determineNotificationType ahora:');
  print('1. ‚úÖ Analiza el payload PRIMERO (prioridad m√°xima)');
  print('2. ‚úÖ Busca "challenge_confirmation" en action');
  print('3. ‚úÖ Si no hay payload, usa las palabras clave del texto');
  print('4. ‚úÖ Detecta "√∫ltimos" + "confirmar" como challenge');
}
