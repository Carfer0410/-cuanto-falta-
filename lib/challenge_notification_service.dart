import 'dart:async';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import 'notification_service.dart';
import 'reminder_tracker.dart';
import 'milestone_notification_service.dart';
import 'individual_streak_service.dart';

class ChallengeNotificationService {
  static Timer? _timer;
  static Timer? _motivationTimer;
  static Timer? _confirmationTimer;
  static bool _isActive = false;

  /// Inicia el sistema de verificaci√≥n de retos cada 6 horas
  static Future<void> startChecking() async {
    if (_isActive) return;
    
    // Verificar si las notificaciones est√°n habilitadas
    final prefs = await SharedPreferences.getInstance();
    final enabled = prefs.getBool('challenge_notifications_enabled') ?? true;
    if (!enabled) {
      print('üîï ChallengeNotificationService: Notificaciones de retos deshabilitadas');
      return;
    }
    
    _isActive = true;
    final frequency = int.parse(prefs.getString('challenge_frequency') ?? '6');
    print('üí™ ChallengeNotificationService: Iniciando verificaci√≥n cada $frequency horas');
    
    // Verificar inmediatamente
    _checkChallengesNow();
    
    // TIMER PRINCIPAL: Verificaciones seg√∫n la frecuencia configurada
    _timer = Timer.periodic(Duration(hours: frequency), (timer) {
      _checkChallengesNow();
    });
    
    // NUEVO: Timer adicional cada 30 minutos para motivaci√≥n activa
    _motivationTimer = Timer.periodic(Duration(minutes: 30), (timer) {
      _checkActiveMotivation();
    });
    
    // üÜï NUEVO: Timer espec√≠fico para ventana de confirmaci√≥n (21:00-23:59)
    // Ejecutar cada minuto para capturar exactamente las 21:00
    _confirmationTimer = Timer.periodic(Duration(minutes: 1), (timer) {
      ConfirmationWindow._checkConfirmationWindow();
    });
    
    // Verificar inmediatamente la ventana de confirmaci√≥n al iniciar
    ConfirmationWindow._checkConfirmationWindow();
    
    // üî• NUEVO: Timer adicional que se sincroniza espec√≠ficamente para las 21:00
    _setupSyncedConfirmationTimer();
    
    print('‚úÖ Timers iniciados: Principal (${frequency}h), Motivaci√≥n (30min), Confirmaci√≥n (1min + sincronizado)');
  }

  /// Configura un timer que se sincroniza espec√≠ficamente para las 21:00 exactas
  static void _setupSyncedConfirmationTimer() {
    final now = DateTime.now();
    
    // Calcular la pr√≥xima vez que sean las 21:00
    DateTime next21 = DateTime(now.year, now.month, now.day, 21, 0, 0);
    if (now.isAfter(next21)) {
      // Si ya pasaron las 21:00 de hoy, programar para ma√±ana
      next21 = next21.add(Duration(days: 1));
    }
    
    final delay = next21.difference(now);
    print('üïò Timer sincronizado para 21:00: pr√≥xima ejecuci√≥n en ${delay.inMinutes} minutos (${next21.toString().substring(11, 16)})');
    
    // Timer que se ejecuta exactamente a las 21:00
    Timer(delay, () {
      print('üéØ ¬°Timer sincronizado ejecut√°ndose EXACTAMENTE a las 21:00!');
      ConfirmationWindow._sendConfirmationWindowNotifications('start');
      
      // Programar el siguiente d√≠a
      _setupSyncedConfirmationTimer();
    });
    
    // NUEVO: Timer adicional espec√≠fico para las 23:30
    _setupSyncedReminderTimer();
  }

  /// Configura un timer que se sincroniza espec√≠ficamente para las 23:30 exactas
  static void _setupSyncedReminderTimer() {
    final now = DateTime.now();
    
    // Calcular la pr√≥xima vez que sean las 23:30
    DateTime next2330 = DateTime(now.year, now.month, now.day, 23, 30, 0);
    if (now.isAfter(next2330)) {
      // Si ya pasaron las 23:30 de hoy, programar para ma√±ana
      next2330 = next2330.add(Duration(days: 1));
    }
    
    final delay = next2330.difference(now);
    print('üïò Timer sincronizado para 23:30: pr√≥xima ejecuci√≥n en ${delay.inMinutes} minutos (${next2330.toString().substring(11, 16)})');
    
    // Timer que se ejecuta exactamente a las 23:30
    Timer(delay, () {
      print('‚è∞ ¬°Timer sincronizado ejecut√°ndose EXACTAMENTE a las 23:30!');
      ConfirmationWindow._sendConfirmationWindowNotifications('reminder');
      
      // Programar el siguiente d√≠a
      _setupSyncedReminderTimer();
    });
  }

  /// Detiene el sistema de verificaci√≥n
  static void stopChecking() {
    _timer?.cancel();
    _motivationTimer?.cancel();
    _confirmationTimer?.cancel();
    _timer = null;
    _motivationTimer = null;
    _confirmationTimer = null;
    _isActive = false;
    print('üõë ChallengeNotificationService: Verificaci√≥n detenida');
  }

  /// Verifica retos inmediatamente
  static Future<void> checkChallengesNow() async {
    print('üîç ChallengeNotificationService: Verificaci√≥n manual iniciada');
    await _checkChallengesNow();
  }

  /// L√≥gica principal de verificaci√≥n de retos
  static Future<void> _checkChallengesNow() async {
    try {
      // Inicializar servicio de notificaciones
      await NotificationService.instance.init();

      // Cargar todos los retos de SharedPreferences
      final prefs = await SharedPreferences.getInstance();
      final jsonString = prefs.getString('counters');
      if (jsonString == null) {
        print('üìã No hay retos guardados');
        return;
      }

      final List<dynamic> countersJson = jsonDecode(jsonString);
      final now = DateTime.now();

      print('üí™ Verificando ${countersJson.length} retos para notificaciones motivacionales...');

      for (final counterJson in countersJson) {
        final counter = _ChallengeCounter.fromJson(counterJson);
        
        // Solo procesar retos que han sido iniciados y confirmados
        if (counter.challengeStartedAt != null && counter.lastConfirmedDate != null) {
          final notificationInfo = _shouldSendMotivationalNotification(
            counter, 
            now
          );
          
          if (notificationInfo != null) {
            // üõ°Ô∏è PROTECCI√ìN ANTI-DUPLICADOS ULTRA-ROBUSTA
            final today = DateTime.now();
            final todayKey = '${today.year}-${today.month}-${today.day}';
            final baseReminderId = counter.title.hashCode;
            
            // Verificar si ya se envi√≥ CUALQUIER notificaci√≥n de hito para este reto HOY
            final allMilestoneTypes = ['day_1', 'day_3', 'week_1', 'day_15', 'month_1', 'month_2', 'month_3', 'month_6', 'year_1'];
            bool alreadySentAnyMilestoneToday = false;
            
            for (final milestoneType in allMilestoneTypes) {
              final wasAlreadySent = await ReminderTracker.wasReminderSent(
                baseReminderId, 
                '${milestoneType}_$todayKey'
              );
              if (wasAlreadySent) {
                print('üõ°Ô∏è BLOQUEO ANTI-DUPLICADO: Ya se envi√≥ "$milestoneType" para "${counter.title}" hoy');
                alreadySentAnyMilestoneToday = true;
                break;
              }
            }
            
            // VERIFICAR TAMBI√âN el tipo espec√≠fico actual
            final wasSpecificTypeSent = await ReminderTracker.wasReminderSent(
              baseReminderId, 
              notificationInfo['reminderType']
            );
            
            // SOLO ENVIAR si NO se ha enviado NING√öN hito hoy
            if (!alreadySentAnyMilestoneToday && !wasSpecificTypeSent) {
              // Enviar notificaci√≥n motivacional
              await NotificationService.instance.showImmediateNotification(
                id: notificationInfo['notificationId'],
                title: notificationInfo['title'],
                body: notificationInfo['body'],
              );

              // Marcar como enviado con M√öLTIPLES claves para prevenir duplicados
              await ReminderTracker.markReminderSent(
                baseReminderId, 
                notificationInfo['reminderType']
              );
              
              await ReminderTracker.markReminderSent(
                baseReminderId, 
                '${notificationInfo['reminderType']}_$todayKey'
              );
              
              // NUEVA PROTECCI√ìN: Marcar tambi√©n con un identificador √∫nico del d√≠a
              await ReminderTracker.markReminderSent(
                baseReminderId, 
                'milestone_sent_$todayKey'
              );

              print('‚úÖ Notificaci√≥n motivacional enviada: ${notificationInfo['title']} para ${counter.title}');
              print('üîí TRIPLE PROTECCI√ìN activada: tipo, fecha y milestone diario');
            } else {
              if (alreadySentAnyMilestoneToday) {
                print('üõ°Ô∏è BLOQUEADO: Ya se envi√≥ un hito HOY para "${counter.title}" - evitando duplicado');
              } else {
                print('üõ°Ô∏è BLOQUEADO: Notificaci√≥n espec√≠fica "${notificationInfo['reminderType']}" ya enviada para "${counter.title}"');
              }
            }
          }
        }
      }
    } catch (e) {
      print('‚ùå Error en verificaci√≥n de retos: $e');
    }
  }

  /// Determina si debe enviar notificaci√≥n motivacional y qu√© tipo
  static Map<String, dynamic>? _shouldSendMotivationalNotification(
      _ChallengeCounter counter, DateTime now) {
    
    if (counter.challengeStartedAt == null || counter.lastConfirmedDate == null) {
      return null;
    }

    // CORRECCI√ìN PARA RETOS RETROACTIVOS
    final lastConfirmed = counter.lastConfirmedDate!;
    final startDate = counter.challengeStartedAt!;
    
    // üî• NUEVA L√ìGICA MEJORADA: Calcular d√≠as de racha considerando retos retroactivos
    // Para retos retroactivos, necesitamos obtener la informaci√≥n correcta de IndividualStreakService
    final challengeId = counter.title.hashCode.toString();
    final streak = IndividualStreakService.instance.getStreak(challengeId);
    
    // üîß CORRECCI√ìN CR√çTICA: Calcular d√≠as correctamente para retos retroactivos
    // Si el reto comenz√≥ el 23 julio y se confirm√≥ el 29 julio = 7 d√≠as (23,24,25,26,27,28,29)
    final directCalculation = lastConfirmed.difference(startDate).inDays + 1;
    final serviceCalculation = streak?.currentStreak;
    
    // USAR SIEMPRE el c√°lculo directo que es m√°s confiable para retos retroactivos
    final streakDays = directCalculation;
    
    // Debug: Mostrar informaci√≥n detallada del c√°lculo
    print('üßÆ Calculando notificaci√≥n para ${counter.title}:');
    print('  üìÖ Inicio del reto: ${startDate.toString().substring(0, 10)}');
    print('  ‚úÖ √öltima confirmaci√≥n: ${lastConfirmed.toString().substring(0, 10)}');
    print('  üî¢ IndividualStreakService respuesta: $serviceCalculation');
    print('  üî¢ C√°lculo directo (USANDO): $directCalculation');
    print('  üìä Diferencia en d√≠as: ${lastConfirmed.difference(startDate).inDays}');
    print('  ‚ûï M√°s 1 d√≠a = $streakDays d√≠as totales');
    print('  üïê Hora actual: ${now.toString().substring(0, 16)}');
    
    // Verificar si el reto sigue activo (√∫ltima confirmaci√≥n no muy antigua)
    final daysSinceLastConfirmation = now.difference(lastConfirmed).inDays;
    final isActive = daysSinceLastConfirmation <= 2;
    
    if (!isActive) return null; // No enviar si el reto parece abandonado

    // Sistema de notificaciones progresivas
    final challengeType = counter.isNegativeHabit ? 'dejar' : 'hacer';
    final activity = _getCleanActivity(counter.title, counter.isNegativeHabit);
    
    final baseId = counter.title.hashCode;
    
    // üéØ NUEVA L√ìGICA MEJORADA: Hitos exactos sin tolerancia para retos retroactivos
    final exactMilestones = {
      1: {'type': 'day_1', 'idOffset': 1001},
      3: {'type': 'day_3', 'idOffset': 1003},
      7: {'type': 'week_1', 'idOffset': 1007},
      15: {'type': 'day_15', 'idOffset': 1015},
      30: {'type': 'month_1', 'idOffset': 1030},
      60: {'type': 'month_2', 'idOffset': 1060},
      90: {'type': 'month_3', 'idOffset': 1090},
      180: {'type': 'month_6', 'idOffset': 1180},
      365: {'type': 'year_1', 'idOffset': 2001},
    };
    
    // üî• CORRECCI√ìN CR√çTICA: Encontrar SOLO EL HITO M√ÅS ESPEC√çFICO (sin tolerancia)
    // Para evitar duplicados, buscar EXACTAMENTE el d√≠a y devolver SOLO UNO
    Map<String, dynamic>? matchingMilestone;
    
    // Buscar hito EXACTO primero (sin tolerancia) - PRIORIDAD ABSOLUTA
    if (exactMilestones.containsKey(streakDays)) {
      matchingMilestone = exactMilestones[streakDays]!;
      print('üéØ Hito EXACTO encontrado para d√≠a $streakDays: ${matchingMilestone['type']} - ENVIANDO SOLO ESTE');
    }
    
    // Si no hay hito exacto, NO enviar nada para evitar confusi√≥n
    // Esto previene que se env√≠en hitos de "d√≠a 1" cuando deber√≠a ser "d√≠a 15", etc.
    if (matchingMilestone == null) {
      print('‚ö†Ô∏è No hay hito exacto para d√≠a $streakDays, no enviando notificaci√≥n para evitar duplicados');
      return null; // No enviar notificaci√≥n si no es un hito exacto
    }
    
    // PROCEDER SOLO SI HAY UN HITO EXACTO
    // üéØ NUEVA L√ìGICA: Generar mensaje basado en los d√≠as REALES de racha
    String title;
    String body;
    
    if (streakDays == 1) {
      title = 'üéâ ¬°Primer d√≠a completado!';
      body = '¬°Felicidades! Has completado tu primer d√≠a ${challengeType == 'dejar' ? 'sin' : 'haciendo'} $activity.\n\nüí™ ¬°Excelente comienzo! Sigue as√≠.';
    } else if (streakDays == 3) {
      title = 'üî• ¬°3 d√≠as de √©xito!';
      body = '¬°Incre√≠ble! Ya llevas 3 d√≠as ${challengeType == 'dejar' ? 'sin' : 'haciendo'} $activity.\n\nüöÄ El h√°bito se est√° formando. ¬°Contin√∫a!';
    } else if (streakDays == 7) {
      title = 'üåü ¬°Una semana completa!';
      body = '¬°Fant√°stico! Has completado una semana entera ${challengeType == 'dejar' ? 'sin' : 'haciendo'} $activity.\n\nüíé ¬°Esto es dedicaci√≥n real!';
    } else if (streakDays == 15) {
      title = '‚≠ê ¬°15 d√≠as de constancia!';
      body = '¬°Impresionante! Ya son 15 d√≠as ${challengeType == 'dejar' ? 'sin' : 'haciendo'} $activity.\n\nüèÜ Tu determinaci√≥n es admirable.';
    } else if (streakDays == 30) {
      title = 'üéä ¬°UN MES COMPLETO!';
      body = '¬°FELICIDADES! Has alcanzado tu primer mes ${challengeType == 'dejar' ? 'sin' : 'haciendo'} $activity.\n\nüëë ¬°Eres una inspiraci√≥n!';
    } else if (streakDays >= 60 && streakDays <= 180) {
      final months = streakDays ~/ 30;
      title = 'üèÖ ¬°$months meses de √©xito!';
      body = '¬°Extraordinario! Ya llevas $months meses ${challengeType == 'dejar' ? 'sin' : 'haciendo'} $activity.\n\nüåà ¬°Tu perseverancia es inspiradora!';
    } else if (streakDays == 365) {
      title = 'üéâ ¬°UN A√ëO COMPLETO!';
      body = 'üèÜ ¬°FELICIDADES! Has completado UN A√ëO ENTERO ${challengeType == 'dejar' ? 'sin' : 'haciendo'} $activity.\n\nüëë ¬°Eres un verdadero campe√≥n! Este es un logro extraordinario.';
    } else if (streakDays > 365) {
      final years = streakDays ~/ 365;
      title = 'üéÜ ¬°$years A√ëOS DE √âXITO!';
      body = 'üåü ¬°INCRE√çBLE! Has completado $years a√±os ${challengeType == 'dejar' ? 'sin' : 'haciendo'} $activity.\n\nüèÜ ¬°Eres una leyenda viviente!';
    } else {
      // Para d√≠as que no tienen hito espec√≠fico, crear mensaje gen√©rico
      title = 'üí™ ¬°$streakDays d√≠as de constancia!';
      body = '¬°Excelente trabajo! Ya llevas $streakDays d√≠as ${challengeType == 'dejar' ? 'sin' : 'haciendo'} $activity.\n\nüöÄ ¬°Sigue adelante!';
    }
    
    final idOffsetRaw = matchingMilestone['idOffset'];
    final idOffset = idOffsetRaw is int ? idOffsetRaw : int.tryParse(idOffsetRaw.toString()) ?? 0;
    
    print('üîî Generando notificaci√≥n:');
    print('  üìù T√≠tulo: $title');
    print('  üí¨ Cuerpo: ${body.substring(0, body.length > 50 ? 50 : body.length)}...');
    print('  üÜî ID: ${baseId + idOffset}');
    print('  üè∑Ô∏è Tipo: ${matchingMilestone['type']}');
    
    return {
      'notificationId': baseId + idOffset,
      'reminderType': matchingMilestone['type'],
      'title': title,
      'body': body,
    };
  }

  /// Extrae la actividad limpia del t√≠tulo del reto
  static String _getCleanActivity(String title, bool isNegativeHabit) {
    final clean = title.toLowerCase().trim();
    
    // Mapeo de actividades comunes a frases m√°s naturales
    final Map<String, String> activityMap = {
      'masturbacion': 'masturbarte',
      'masturbar': 'masturbarte', 
      'cigarro': 'fumar',
      'cigarros': 'fumar',
      'tabaco': 'fumar',
      'alcohol': 'beber alcohol',
      'bebida': 'beber',
      'ejercicio': 'ejercicio',
      'gym': 'ir al gimnasio',
      'correr': 'correr',
      'leer': 'leer',
      'estudiar': 'estudiar',
      'meditar': 'meditar',
      'dormir': 'dormir bien',
      'agua': 'tomar agua',
    };

    // Buscar coincidencias en el mapa
    for (final key in activityMap.keys) {
      if (clean.contains(key)) {
        return activityMap[key]!;
      }
    }

    // Si no encuentra coincidencia, usar el t√≠tulo tal como est√°
    return clean;
  }

  /// Verificaci√≥n motivacional activa cada 30 minutos
  static Future<void> _checkActiveMotivation() async {
    if (!_isActive) return;
    
    try {
      final prefs = await SharedPreferences.getInstance();
      final enabled = prefs.getBool('challenge_notifications_enabled') ?? true;
      if (!enabled) return;
      
      // üÜï MEJORADO: Usar el nuevo sistema de motivaci√≥n m√°s avanzado
      await MilestoneNotificationService.sendMotivationalMessage();
      
    } catch (e) {
      print('‚ùå Error en motivaci√≥n activa: $e');
    }
  }

  /// Getter para saber si est√° activo
  static bool get isActive => _isActive;

  /// üß™ M√âTODO DE PRUEBA: Simular verificaci√≥n de ventana de confirmaci√≥n
  static Future<void> testConfirmationWindow() async {
    print('üß™ === PRUEBA MANUAL DE VENTANA DE CONFIRMACI√ìN ===');
    try {
      await ConfirmationWindow._checkConfirmationWindow();
      print('‚úÖ Prueba de ventana de confirmaci√≥n completada');
    } catch (e) {
      print('‚ùå Error en prueba: $e');
    }
  }

  /// üß™ M√âTODO DE PRUEBA: Simular notificaci√≥n de inicio
  static Future<void> testStartNotification() async {
    print('üß™ === PRUEBA MANUAL DE NOTIFICACI√ìN DE INICIO ===');
    try {
      await ConfirmationWindow._sendConfirmationWindowNotifications('start');
      print('‚úÖ Prueba de notificaci√≥n de inicio completada');
    } catch (e) {
      print('‚ùå Error en prueba: $e');
    }
  }

  /// üß™ M√âTODO DE PRUEBA: Forzar notificaci√≥n sin verificar si ya fue enviada
  static Future<void> testForceNotification() async {
    print('üß™ === PRUEBA FORZADA DE NOTIFICACI√ìN ===');
    try {
      await NotificationService.instance.init();
      await NotificationService.instance.showImmediateNotification(
        id: 99999,
        title: 'üß™ Notificaci√≥n de Prueba',
        body: 'Esta es una notificaci√≥n de prueba para verificar que el sistema funciona correctamente.',
      );
      print('‚úÖ Notificaci√≥n de prueba enviada (ID: 99999)');
    } catch (e) {
      print('‚ùå Error en notificaci√≥n de prueba: $e');
    }
  }

  /// üß™ M√âTODO DE PRUEBA: Limpiar historial de notificaciones enviadas
  static Future<void> clearNotificationHistory() async {
    print('üß™ === LIMPIANDO HISTORIAL DE NOTIFICACIONES ===');
    try {
      final prefs = await SharedPreferences.getInstance();
      
      // Limpiar notificaciones de ventana de confirmaci√≥n (formato antiguo)
      final windowKeys = prefs.getKeys().where((key) => key.contains('confirmation_window_')).toList();
      
      // Limpiar recordatorios de ReminderTracker (formato: reminder_sent_${hashCode}_${type})
      final reminderKeys = prefs.getKeys().where((key) => key.startsWith('reminder_sent_')).toList();
      
      // üÜï NUEVO: Limpiar tambi√©n las claves con fecha para evitar duplicados
      final today = DateTime.now();
      final todayKey = '${today.year}-${today.month}-${today.day}';
      final dateKeys = prefs.getKeys().where((key) => key.contains(todayKey)).toList();
      
      // üÜï ULTRA-ROBUSTAS: Limpiar protecciones adicionales
      final milestoneKeys = prefs.getKeys().where((key) => key.contains('milestone_sent_')).toList();
      final allHitoKeys = prefs.getKeys().where((key) => 
        key.contains('day_') || 
        key.contains('week_') || 
        key.contains('month_') || 
        key.contains('year_')).toList();
      
      // üî• NUEVO: Limpiar tambi√©n las notificaciones del MilestoneNotificationService
      final lastMilestoneKeys = prefs.getKeys().where((key) => key.startsWith('last_milestone_')).toList();
      
      final allKeys = [...windowKeys, ...reminderKeys, ...dateKeys, ...milestoneKeys, ...allHitoKeys, ...lastMilestoneKeys];
      
      for (final key in allKeys) {
        await prefs.remove(key);
        print('üóëÔ∏è Removido: $key');
      }
      
      print('‚úÖ Historial de notificaciones COMPLETAMENTE limpiado (${allKeys.length} entradas)');
      print('üõ°Ô∏è Sistema anti-duplicados REINICIADO - todas las protecciones removidas');
      print('üî• MilestoneNotificationService tambi√©n limpiado');
      
      // Debug: Mostrar todas las claves que quedan relacionadas con notificaciones
      final remainingKeys = prefs.getKeys().where((key) => 
        key.contains('confirmation') || 
        key.contains('reminder_sent') ||
        key.contains('milestone_sent') ||
        key.contains('last_milestone_') ||
        key.contains('day_') ||
        key.contains('week_') ||
        key.contains('month_')).toList();
      print('üîç Claves restantes relacionadas con notificaciones: $remainingKeys');
      
    } catch (e) {
      print('‚ùå Error limpiando historial: $e');
    }
  }

  /// üß™ M√âTODO DE PRUEBA: Forzar notificaci√≥n de ventana sin verificar historial
  static Future<void> testForceWindowNotification() async {
    print('üß™ === PRUEBA FORZADA DE NOTIFICACI√ìN DE VENTANA ===');
    try {
      // Cargar retos
      final prefs = await SharedPreferences.getInstance();
      final jsonString = prefs.getString('counters');
      if (jsonString == null) {
        print('‚ùå No hay retos guardados');
        return;
      }

      final List<dynamic> countersJson = jsonDecode(jsonString);
      final now = DateTime.now();
      
      // Contar retos pendientes
      int pendingChallenges = 0;
      List<String> challengeTitles = [];
      
      for (final counterJson in countersJson) {
        final counter = _ChallengeCounter.fromJson(counterJson);
        if (counter.challengeStartedAt != null) {
          final notConfirmedToday = counter.lastConfirmedDate == null || 
              !ConfirmationWindow._isSameDay(counter.lastConfirmedDate!, now);
          
          if (notConfirmedToday) {
            pendingChallenges++;
            challengeTitles.add(counter.title);
          }
        }
      }
      
      if (pendingChallenges == 0) {
        print('‚ùå No hay retos pendientes para notificar');
        return;
      }
      
      // Forzar notificaci√≥n sin verificar historial
      final title = 'üß™ PRUEBA: ¬°Ventana de confirmaci√≥n abierta!';
      final body = pendingChallenges == 1 
          ? 'PRUEBA: Puedes confirmar tu reto "${challengeTitles.first}" desde las 21:00 hasta las 23:59'
          : 'PRUEBA: Puedes confirmar tus $pendingChallenges retos desde las 21:00 hasta las 23:59';
      
      await NotificationService.instance.init();
      await NotificationService.instance.showImmediateNotification(
        id: 88888,
        title: title,
        body: body,
      );
      
      print('üîî Notificaci√≥n de ventana FORZADA enviada (ID: 88888)');
      print('  ‚Ä¢ Retos: $challengeTitles');
      print('  ‚Ä¢ Cantidad: $pendingChallenges');
      
    } catch (e) {
      print('‚ùå Error en notificaci√≥n forzada: $e');
    }
  }

  /// üß™ FUNCI√ìN DE PRUEBA: Simular notificaciones de 21:00 y 23:30
  static Future<void> testConfirmationNotifications() async {
    print('üß™ === PRUEBA DE NOTIFICACIONES 21:00 Y 23:30 ===');
    try {
      await NotificationService.instance.init();
      
      // Simular notificaci√≥n de 21:00
      print('üì¢ Probando notificaci√≥n de apertura (21:00)...');
      await NotificationService.instance.showImmediateNotification(
        id: 77777,
        title: 'üéØ ¬°Ventana de confirmaci√≥n abierta!',
        body: '[PRUEBA 21:00] ¬°Es hora de confirmar tus retos! Tienes hasta las 23:59. ¬°A por todas! üöÄ',
      );
      
      // Esperar 3 segundos
      await Future.delayed(Duration(seconds: 3));
      
      // Simular notificaci√≥n de 23:30
      print('üì¢ Probando notificaci√≥n de recordatorio (23:30)...');
      await NotificationService.instance.showImmediateNotification(
        id: 66666,
        title: '‚è∞ ¬°√öltimos 29 minutos!',
        body: '[PRUEBA 23:30] Recuerda confirmar tus retos antes de las 23:59. ¬°Solo quedan 29 minutos!',
      );
      
      print('‚úÖ Ambas notificaciones de prueba enviadas correctamente');
      print('   üì± ID 77777: Notificaci√≥n de apertura (21:00)');
      print('   üì± ID 66666: Notificaci√≥n de recordatorio (23:30 - 29 min restantes)');
      print('   ‚è∞ Nota: La ventana se cierra exactamente a las 23:59');
      
    } catch (e) {
      print('‚ùå Error en prueba de notificaciones: $e');
    }
  }

  /// üß™ M√âTODO DE PRUEBA ESPEC√çFICO: Validar notificaciones para retos retroactivos
  static Future<void> testRetroactiveChallengeNotification() async {
    print('üß™ === PRUEBA DE RETOS RETROACTIVOS ===');
    try {
      // üßπ LIMPIAR HISTORIAL DE PRUEBAS ANTERIORES
      print('üßπ Limpiando historial de notificaciones para prueba limpia...');
      await clearNotificationHistory();
      
      // üéØ CASO ESPEC√çFICO DEL USUARIO: 23 julio - 29 julio = 7 d√≠as
      print('üìÖ === CASO REAL DEL USUARIO ===');
      print('üìÖ Reto iniciado: 23 julio 2025');
      print('‚úÖ Confirmado: 29 julio 2025');
      print('üî¢ Total d√≠as esperados: 7 d√≠as (23,24,25,26,27,28,29)');
      print('üéØ DEBE mostrar: "¬°Una semana completa!" NO "primer d√≠a"');
      
      final userStartDate = DateTime(2025, 7, 23); // 23 julio 2025
      final userConfirmDate = DateTime(2025, 7, 29); // 29 julio 2025
      
      final userTestCounter = _ChallengeCounter(
        title: 'Test Usuario REAL - 7 d√≠as retroactivo',
        startDate: userStartDate,
        lastConfirmedDate: userConfirmDate,
        isNegativeHabit: true,
        challengeStartedAt: userStartDate,
      );
      
      print('\nüßÆ === C√ÅLCULO DETALLADO ===');
      final diffDays = userConfirmDate.difference(userStartDate).inDays;
      final totalDays = diffDays + 1;
      print('üìä Diferencia (difference): $diffDays d√≠as');
      print('‚ûï M√°s 1 d√≠a de inclusi√≥n: $totalDays d√≠as totales');
      print('‚úÖ CORRECTO: Debe ser 7 d√≠as');
      
      final userNotification = _shouldSendMotivationalNotification(userTestCounter, DateTime.now());
      
      if (userNotification != null) {
        print('\nüîî === NOTIFICACI√ìN GENERADA ===');
        print('üìù T√≠tulo: ${userNotification['title']}');
        print('üí¨ Cuerpo: ${userNotification['body']}');
        print('üè∑Ô∏è Tipo: ${userNotification['reminderType']}');
        
        // Verificar que es el tipo correcto
        if (userNotification['reminderType'] == 'week_1' && userNotification['title'].contains('semana')) {
          print('‚úÖ ¬°CORRECTO! Detect√≥ una semana completa (7 d√≠as)');
        } else if (userNotification['reminderType'] == 'day_1') {
          print('‚ùå ERROR: Detect√≥ d√≠a 1 cuando deber√≠a ser semana 1');
          print('üîß El c√°lculo de d√≠as est√° fallando');
        } else {
          print('‚ö†Ô∏è Detect√≥ tipo: ${userNotification['reminderType']} - verificar si es correcto');
        }
        
        print('\nüì± Enviando notificaci√≥n de prueba...');
        await NotificationService.instance.init();
        await NotificationService.instance.showImmediateNotification(
          id: userNotification['notificationId'],
          title: '[PRUEBA 7 D√çAS] ${userNotification['title']}',
          body: '[23-29 JULIO] ${userNotification['body']}',
        );
        
        print('‚úÖ Notificaci√≥n de prueba enviada');
      } else {
        print('‚ùå No se gener√≥ notificaci√≥n para el caso del usuario');
      }
      
      // Lista adicional de casos de prueba
      final testCases = [
        {'startDay': 23, 'endDay': 24, 'expectedDays': 2, 'expectedType': 'none'},
        {'startDay': 23, 'endDay': 25, 'expectedDays': 3, 'expectedType': 'day_3'},
        {'startDay': 23, 'endDay': 29, 'expectedDays': 7, 'expectedType': 'week_1'},
        {'startDay': 15, 'endDay': 29, 'expectedDays': 15, 'expectedType': 'day_15'},
      ];
      
      print('\nüß™ === CASOS DE PRUEBA ADICIONALES ===');
      for (final testCase in testCases) {
        final start = DateTime(2025, 7, testCase['startDay'] as int);
        final end = DateTime(2025, 7, testCase['endDay'] as int);
        final expectedDays = testCase['expectedDays'] as int;
        final expectedType = testCase['expectedType'] as String;
        
        final testCounter = _ChallengeCounter(
          title: 'Prueba ${expectedDays} d√≠as',
          startDate: start,
          lastConfirmedDate: end,
          isNegativeHabit: true,
          challengeStartedAt: start,
        );
        
        print('\nüìÖ Inicio: ${start.day} julio ‚Üí Final: ${end.day} julio');
        final notification = _shouldSendMotivationalNotification(testCounter, DateTime.now());
        
        if (notification != null) {
          final actualType = notification['reminderType'];
          print('  üî¢ D√≠as calculados: OK');
          print('  üè∑Ô∏è Tipo detectado: $actualType');
          print('  üéØ Tipo esperado: $expectedType');
          print('  ${actualType == expectedType ? '‚úÖ CORRECTO' : '‚ùå ERROR'}');
        } else if (expectedType == 'none') {
          print('  ‚úÖ CORRECTO: No hay hito para $expectedDays d√≠as');
        } else {
          print('  ‚ùå ERROR: No se gener√≥ notificaci√≥n');
        }
      }
      
    } catch (e) {
      print('‚ùå Error en prueba retroactiva: $e');
    }
  }
}

/// Clase auxiliar para manejar los datos del contador/reto
class _ChallengeCounter {
  final String title;
  final DateTime startDate;
  final DateTime? lastConfirmedDate;
  final bool isNegativeHabit;
  final DateTime? challengeStartedAt;

  _ChallengeCounter({
    required this.title,
    required this.startDate,
    this.lastConfirmedDate,
    this.isNegativeHabit = false,
    this.challengeStartedAt,
  });

  static _ChallengeCounter fromJson(Map<String, dynamic> json) => _ChallengeCounter(
    title: json['title'],
    startDate: DateTime.parse(json['startDate']),
    lastConfirmedDate: json['lastConfirmedDate'] != null
        ? DateTime.parse(json['lastConfirmedDate'])
        : null,
    isNegativeHabit: json['isNegativeHabit'] == true,
    challengeStartedAt: json['challengeStartedAt'] != null
        ? DateTime.parse(json['challengeStartedAt'])
        : null,
  );
}

/// üÜï NUEVO: Extensi√≥n de ChallengeNotificationService para ventana de confirmaci√≥n
extension ConfirmationWindow on ChallengeNotificationService {
  /// Verifica si estamos en la ventana de confirmaci√≥n (funci√≥n de respaldo)
  /// Los timers espec√≠ficos de 21:00 y 23:30 son m√°s precisos
  static Future<void> _checkConfirmationWindow() async {
    try {
      final now = DateTime.now();
      final currentHour = now.hour;
      final currentMinute = now.minute;
      
      // Debug log reducido ya que los timers espec√≠ficos son m√°s precisos
      print('üîç Verificaci√≥n de respaldo: ${currentHour}:${currentMinute.toString().padLeft(2, '0')}');
      
      // Solo actuar como respaldo si los timers espec√≠ficos fallan
      if (currentHour == 21 && currentMinute == 0) {
        print('üì¢ [RESPALDO] Verificando notificaci√≥n de 21:00');
        await _sendConfirmationWindowNotifications('start');
      } else if (currentHour == 23 && currentMinute == 30) {
        print('üì¢ [RESPALDO] Verificando notificaci√≥n de 23:30');
        await _sendConfirmationWindowNotifications('reminder');
      }
    } catch (e) {
      print('‚ùå Error en verificaci√≥n de respaldo: $e');
    }
  }

  /// Env√≠a notificaciones de ventana de confirmaci√≥n
  static Future<void> _sendConfirmationWindowNotifications(String type) async {
    try {
      // Cargar retos
      final prefs = await SharedPreferences.getInstance();
      final jsonString = prefs.getString('counters');
      if (jsonString == null) return;

      final List<dynamic> countersJson = jsonDecode(jsonString);
      final now = DateTime.now();
      
      // Contar retos pendientes de confirmaci√≥n y obtener informaci√≥n detallada
      int pendingChallenges = 0;
      List<String> challengeTitles = [];
      final List<Map<String, dynamic>> challengeDetails = [];
      
      for (final counterJson in countersJson) {
        final counter = _ChallengeCounter.fromJson(counterJson);
        
        // Verificar si el reto est√° iniciado y no confirmado hoy
        if (counter.challengeStartedAt != null) {
          final notConfirmedToday = counter.lastConfirmedDate == null || 
              !ConfirmationWindow._isSameDay(counter.lastConfirmedDate!, now);
          
          if (notConfirmedToday) {
            // Verificar si el reto cumple el tiempo m√≠nimo para confirmaci√≥n
            final minutesSinceStart = now.difference(counter.challengeStartedAt!).inMinutes;
            final currentHour = now.hour;
            
            // Determinar tiempo m√≠nimo seg√∫n horario (sistema h√≠brido)
            int minimumTimeRequired;
            if (currentHour >= 21 || currentHour <= 23) {
              minimumTimeRequired = 10; // Ventana nocturna
            } else if (currentHour >= 0 && currentHour <= 5) {
              minimumTimeRequired = 30; // Madrugada
            } else {
              minimumTimeRequired = 60; // D√≠a normal
            }
            
            final canConfirmNow = minutesSinceStart >= minimumTimeRequired;
            final timeRemaining = canConfirmNow ? 0 : (minimumTimeRequired - minutesSinceStart);
            
            challengeDetails.add({
              'title': counter.title,
              'canConfirm': canConfirmNow,
              'timeRemaining': timeRemaining,
              'minimumRequired': minimumTimeRequired
            });
            
            if (canConfirmNow) {
              pendingChallenges++;
              challengeTitles.add(counter.title);
            }
          }
        }
      }
      
      // Si no hay retos listos AHORA, no enviar notificaci√≥n de "listos"
      if (type == 'start' && pendingChallenges == 0) {
        final retosConTiempo = challengeDetails.where((c) => !c['canConfirm']).toList();
        if (retosConTiempo.isNotEmpty) {
          // Hay retos pero ninguno est√° listo a√∫n
          final proximoReto = retosConTiempo.reduce((a, b) => 
            a['timeRemaining'] < b['timeRemaining'] ? a : b);
          
          print('‚è∞ Hay retos pero ninguno est√° listo. Pr√≥ximo: "${proximoReto['title']}" en ${proximoReto['timeRemaining']}min');
          return; // No enviar notificaci√≥n prematura
        } else {
          print('‚úÖ No hay retos pendientes de confirmaci√≥n');
          return;
        }
      }
      
      if (pendingChallenges == 0) {
        print('‚úÖ No hay retos pendientes de confirmaci√≥n');
        return;
      }
      
      // Generar notificaci√≥n inteligente seg√∫n el tipo
      String title;
      String body;
      int notificationId;
      
      if (type == 'start') {
        if (pendingChallenges == 1) {
          title = 'üéØ ¬°Ventana de confirmaci√≥n abierta!';
          body = '¬°Es hora de confirmar tu reto "${challengeTitles.first}"! Tienes hasta las 23:59 para confirmarlo. üí™';
        } else {
          title = 'üéØ ¬°Ventana de confirmaci√≥n abierta!';
          body = '¬°Es hora de confirmar tus $pendingChallenges retos! Tienes hasta las 23:59. ¬°A por todas! üöÄ';
        }
        
        // Agregar informaci√≥n sobre retos que A√öN no est√°n listos
        final retosNoListos = challengeDetails.where((c) => !c['canConfirm']).toList();
        if (retosNoListos.isNotEmpty) {
          final proximoReto = retosNoListos.reduce((a, b) => 
            a['timeRemaining'] < b['timeRemaining'] ? a : b);
          body += '\n\n‚è≥ "${proximoReto['title']}" estar√° listo en ${proximoReto['timeRemaining']} min';
        }
        
        notificationId = 50001;
      } else {
        title = '‚è∞ ¬°√öltimos 29 minutos!';
        body = pendingChallenges == 1
            ? 'Recuerda confirmar "${challengeTitles.first}" antes de las 23:59. ¬°Solo quedan 29 minutos!'
            : 'Recuerda confirmar tus $pendingChallenges retos antes de las 23:59. ¬°Solo quedan 29 minutos!';
        notificationId = 50002;
      }
      
      // Verificar si ya se envi√≥ esta notificaci√≥n hoy
      final reminderKey = 'confirmation_window_${type}_${now.day}_${now.month}_${now.year}';
      final wasAlreadySent = await ReminderTracker.wasReminderSent(reminderKey.hashCode, type);
      
      print('üîç Debug notificaci√≥n:');
      print('  ‚Ä¢ Tipo: $type');
      print('  ‚Ä¢ Retos pendientes: $pendingChallenges');
      print('  ‚Ä¢ T√≠tulos: $challengeTitles');
      print('  ‚Ä¢ ReminderKey: $reminderKey');
      print('  ‚Ä¢ Ya enviada: $wasAlreadySent');
      
      if (!wasAlreadySent) {
        print('üì§ Enviando notificaci√≥n...');
        await NotificationService.instance.showImmediateNotification(
          id: notificationId,
          title: title,
          body: body,
        );
        
        await ReminderTracker.markReminderSent(reminderKey.hashCode, type);
        print('üîî Notificaci√≥n de ventana de confirmaci√≥n enviada: $type');
        print('‚úÖ Notificaci√≥n marcada como enviada para evitar duplicados');
      } else {
        print('‚è≠Ô∏è Notificaci√≥n ya fue enviada hoy, saltando...');
      }
      
    } catch (e) {
      print('‚ùå Error enviando notificaciones de confirmaci√≥n: $e');
    }
  }

  /// Verifica si dos fechas son del mismo d√≠a
  static bool _isSameDay(DateTime a, DateTime b) =>
      a.year == b.year && a.month == b.month && a.day == b.day;
}