// üß™ TEST ESPEC√çFICO: CONFIRMACI√ìN DESPU√âS DE RETO RETROACTIVO
// Archivo: test_confirmacion_despues_retroactivo.dart

void main() {
  print('=== üîç TEST: CONFIRMACI√ìN DESPU√âS DE RETO RETROACTIVO ===\n');
  
  testEscenarioCompleto();
}

void testEscenarioCompleto() {
  print('üéØ ESCENARIO COMPLETO: Reto retroactivo + Confirmaci√≥n HOY');
  
  // PASO 1: Usuario crea reto retroactivo
  print('\nüìÖ PASO 1: Creaci√≥n de reto retroactivo');
  
  final today = DateTime(2025, 7, 30);
  final startDate = DateTime(2025, 7, 27); // 3 d√≠as atr√°s
  final daysToGrant = 3;
  
  print('  ‚Ä¢ Hoy: ${today.day}/${today.month}');
  print('  ‚Ä¢ Fecha inicio: ${startDate.day}/${startDate.month}');
  print('  ‚Ä¢ D√≠as a otorgar: $daysToGrant');
  
  // Crear historial retroactivo (igual que grantBackdatedStreak)
  final backdatedHistory = <DateTime>[];
  for (int i = 0; i < daysToGrant; i++) {
    final confirmDate = startDate.add(Duration(days: i));
    backdatedHistory.add(confirmDate);
  }
  
  print('  ‚Ä¢ Historial retroactivo: ${backdatedHistory.map((d) => '${d.day}/${d.month}').join(', ')}');
  
  // Calcular racha inicial (igual que grantBackdatedStreak)
  final initialStreak = calculateStreakForHistory(backdatedHistory);
  print('  ‚Ä¢ Racha inicial calculada: $initialStreak d√≠as');
  
  // PASO 2: Usuario confirma HOY
  print('\nüìÖ PASO 2: Confirmaci√≥n de HOY');
  
  // Agregar confirmaci√≥n de hoy (igual que confirmChallenge)
  final newHistory = [...backdatedHistory, today];
  print('  ‚Ä¢ Nuevo historial: ${newHistory.map((d) => '${d.day}/${d.month}').join(', ')}');
  
  // Recalcular racha (igual que confirmChallenge)
  final newStreak = calculateStreakForHistory(newHistory);
  print('  ‚Ä¢ Nueva racha calculada: $newStreak d√≠as');
  
  // AN√ÅLISIS
  print('\nüîç AN√ÅLISIS:');
  print('  ‚Ä¢ Racha antes de confirmar HOY: $initialStreak d√≠as');
  print('  ‚Ä¢ Racha despu√©s de confirmar HOY: $newStreak d√≠as');
  print('  ‚Ä¢ Diferencia: ${newStreak - initialStreak} d√≠as');
  
  if (newStreak == initialStreak + 1) {
    print('  ‚úÖ CORRECTO: La racha aument√≥ en 1 d√≠a (confirmaci√≥n de HOY)');
  } else if (newStreak == initialStreak) {
    print('  ‚ö†Ô∏è PROBLEMA: La racha no aument√≥ (algo est√° mal)');
  } else if (newStreak < initialStreak) {
    print('  ‚ùå ERROR GRAVE: La racha disminuy√≥ (bug serio)');
  } else {
    print('  ‚ùì EXTRA√ëO: La racha aument√≥ m√°s de 1 d√≠a');
  }
  
  // VERIFICACI√ìN DETALLADA
  print('\nüßÆ VERIFICACI√ìN DETALLADA:');
  print('Historial esperado para racha de ${daysToGrant + 1} d√≠as:');
  print('  27/07 ‚Üí 28/07 ‚Üí 29/07 ‚Üí 30/07 (4 d√≠as consecutivos)');
  
  if (newStreak == daysToGrant + 1) {
    print('  ‚úÖ RESULTADO ESPERADO CORRECTO');
  } else {
    print('  ‚ùå RESULTADO INCORRECTO - HAY UN BUG');
  }
}

// Simular la l√≥gica de _calculateStreak
int calculateStreakForHistory(List<DateTime> confirmationHistory) {
  if (confirmationHistory.isEmpty) return 0;
  
  // Obtener confirmaciones √∫nicas
  final uniqueConfirmations = <DateTime>{};
  for (final confirmation in confirmationHistory) {
    final normalizedDate = DateTime(confirmation.year, confirmation.month, confirmation.day);
    uniqueConfirmations.add(normalizedDate);
  }
  
  final sortedConfirmations = uniqueConfirmations.toList();
  sortedConfirmations.sort((a, b) => b.compareTo(a)); // M√°s reciente primero
  
  print('    Confirmaciones ordenadas: ${sortedConfirmations.map((d) => '${d.day}/${d.month}').join(', ')}');
  
  int currentStreak = 0;
  DateTime expectedDate = sortedConfirmations.first;
  
  print('    Empezando desde: ${expectedDate.day}/${expectedDate.month}');
  
  for (final confirmDate in sortedConfirmations) {
    print('    üîç Verificando: ${confirmDate.day}/${confirmDate.month} vs ${expectedDate.day}/${expectedDate.month}');
    
    if (confirmDate.isAtSameMomentAs(expectedDate)) {
      currentStreak++;
      expectedDate = expectedDate.subtract(Duration(days: 1));
      print('    ‚úÖ Racha: $currentStreak, siguiente: ${expectedDate.day}/${expectedDate.month}');
    } else {
      print('    ‚ùå Hueco detectado, parar');
      break;
    }
  }
  
  return currentStreak;
}
