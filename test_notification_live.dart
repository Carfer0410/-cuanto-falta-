import 'package:flutter/material.dart';
import 'lib/notification_service.dart';
import 'lib/notification_center_service.dart';
import 'lib/notification_center_models.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  
  print('üß™ === PRUEBA DE NOTIFICACI√ìN EN VIVO ===');
  
  // Inicializar servicios
  await NotificationService.instance.init();
  await NotificationCenterService.instance.init();
  
  // Simular la notificaci√≥n problem√°tica
  String problematicTitle = "‚è∞ ¬°√öltimos 29 minutos!";
  String problematicBody = "No olvides confirmar tu reto de meditaci√≥n antes de que termine el d√≠a. ¬°Ve a la pantalla de retos!";
  
  print('üì§ Enviando notificaci√≥n de prueba:');
  print('   T√≠tulo: "$problematicTitle"');
  print('   Cuerpo: "$problematicBody"');
  
  // Enviar la notificaci√≥n usando el sistema real
  await NotificationService.instance.showImmediateNotification(
    id: 12345,
    title: problematicTitle,
    body: problematicBody,
    payload: '{"action": "open_challenges", "screen": "challenges"}',
  );
  
  // Esperar un momento para que se procese
  await Future.delayed(Duration(milliseconds: 500));
  
  // Verificar el resultado en el centro de notificaciones
  final notifications = NotificationCenterService.instance.notifications;
  
  print('\nüìã Resultado en Centro de Notificaciones:');
  print('   Total notificaciones: ${notifications.length}');
  
  // Buscar nuestra notificaci√≥n de prueba
  final testNotification = notifications.firstWhere(
    (n) => n.title == problematicTitle,
    orElse: () => AppNotification(
      id: 'not_found',
      title: 'No encontrada',
      body: '',
      type: NotificationType.general,
      timestamp: DateTime.now(),
    ),
  );
  
  if (testNotification.id != 'not_found') {
    print('‚úÖ Notificaci√≥n encontrada:');
    print('   ID: ${testNotification.id}');
    print('   Tipo: ${testNotification.type}');
    print('   ¬øEs challenge?: ${testNotification.type == NotificationType.challenge}');
    
    if (testNotification.type == NotificationType.challenge) {
      print('üéâ ¬°√âXITO! La notificaci√≥n se clasific√≥ correctamente como CHALLENGE');
    } else {
      print('‚ùå ERROR: La notificaci√≥n se clasific√≥ como ${testNotification.type}');
    }
  } else {
    print('‚ùå ERROR: Notificaci√≥n no encontrada en el centro');
  }
  
  print('\nüìä Estado completo del centro:');
  for (var notification in notifications) {
    print('   ‚Ä¢ "${notification.title}" ‚Üí ${notification.type}');
  }
  
  print('\n‚úÖ Prueba completada');
}
