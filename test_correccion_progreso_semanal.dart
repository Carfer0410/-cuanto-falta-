/// üß™ Prueba de la correcci√≥n del progreso semanal
/// Verifica que la barra "esta semana" se calcule correctamente despu√©s de fallar

void main() {
  print('üß™ === PRUEBA DE CORRECCI√ìN: PROGRESO SEMANAL ===\n');
  
  // Simular el estado del usuario antes del fallo
  final confirmationHistory = [
    DateTime(2025, 7, 28), // Lunes - confirmado
  ];
  
  final failedDays = [
    DateTime(2025, 7, 29), // Martes - fall√≥ sin perd√≥n
  ];
  
  print('üìã ESTADO DEL RETO:');
  print('  ‚Ä¢ Reto iniciado: 27/07/2025 (Domingo)');
  print('  ‚Ä¢ Confirmaciones: ${confirmationHistory.map((d) => "${d.day}/${d.month}").join(", ")}');
  print('  ‚Ä¢ D√≠as fallidos: ${failedDays.map((d) => "${d.day}/${d.month}").join(", ")}');
  print('  ‚Ä¢ Racha actual: 0 (se perdi√≥)');
  
  // Probar el c√°lculo ANTES de la correcci√≥n
  print('\n‚ùå ANTES DE LA CORRECCI√ìN:');
  final resultadoAntes = calcularProgresoSemanalAntes(confirmationHistory, DateTime(2025, 7, 29));
  print('  ‚Ä¢ D√≠as completados: ${resultadoAntes["completed"]}');
  print('  ‚Ä¢ Total d√≠as: ${resultadoAntes["total"]}');
  print('  ‚Ä¢ Mostrado: ${resultadoAntes["completed"]}/${resultadoAntes["total"]} d√≠as');
  print('  ‚Ä¢ üî¥ PROBLEMA: Usuario ve "1/2" pero perdi√≥ la racha');
  
  // Probar el c√°lculo DESPU√âS de la correcci√≥n
  print('\n‚úÖ DESPU√âS DE LA CORRECCI√ìN:');
  final resultadoDespues = calcularProgresoSemanalDespues(confirmationHistory, failedDays, DateTime(2025, 7, 29));
  print('  ‚Ä¢ D√≠as completados: ${resultadoDespues["completed"]}');
  print('  ‚Ä¢ Total d√≠as: ${resultadoDespues["total"]}');
  print('  ‚Ä¢ Mostrado: ${resultadoDespues["completed"]}/${resultadoDespues["total"]} d√≠as');
  print('  ‚Ä¢ üü¢ CORRECTO: Usuario ve "0/2" coherente con racha perdida');
  
  // Probar casos adicionales
  print('\nüß™ CASOS ADICIONALES:');
  
  // Caso 1: Sin fallos (deber√≠a seguir funcionando normal)
  final casoSinFallos = calcularProgresoSemanalDespues([DateTime(2025, 7, 28)], [], DateTime(2025, 7, 29));
  print('  ‚Ä¢ Sin fallos: ${casoSinFallos["completed"]}/${casoSinFallos["total"]} d√≠as ‚úÖ');
  
  // Caso 2: M√∫ltiples confirmaciones antes del fallo
  final confirmacionesMultiples = [
    DateTime(2025, 7, 28), // Lunes
    DateTime(2025, 7, 29), // Martes (despu√©s fall√≥)
  ];
  final falloTarde = [DateTime(2025, 7, 30)]; // Mi√©rcoles
  final casoMultiple = calcularProgresoSemanalDespues(confirmacionesMultiples, falloTarde, DateTime(2025, 7, 30));
  print('  ‚Ä¢ M√∫ltiples confirmaciones + fallo: ${casoMultiple["completed"]}/${casoMultiple["total"]} d√≠as');
  print('    (Deber√≠a ser 0/3 porque el fallo del mi√©rcoles invalida todo)');
  
  print('\nüéØ RESUMEN DE LA CORRECCI√ìN:');
  print('  ‚úÖ Mantiene historial de confirmaciones (hechos hist√≥ricos)');
  print('  ‚úÖ Calcula progreso semanal considerando fallos posteriores');
  print('  ‚úÖ Consistencia: Racha perdida = Progreso semanal reiniciado');
  print('  ‚úÖ L√≥gica UX: "Si fall√©, las confirmaciones anteriores ya no cuentan"');
}

// Simulaci√≥n del c√°lculo ANTES de la correcci√≥n (buggy)
Map<String, int> calcularProgresoSemanalAntes(List<DateTime> historial, DateTime hoy) {
  final inicioSemana = hoy.subtract(Duration(days: hoy.weekday - 1));
  final hoyData = DateTime(hoy.year, hoy.month, hoy.day);
  
  int diasCompletados = 0;
  int totalDias = 0;
  
  for (int i = 0; i < 7; i++) {
    final dia = inicioSemana.add(Duration(days: i));
    final diaData = DateTime(dia.year, dia.month, dia.day);
    
    if (diaData.isAfter(hoyData)) break;
    totalDias++;
    
    // L√ìGICA ANTERIOR (BUGGY): Solo verifica si fue confirmado
    final confirmado = historial.any((confirmacion) {
      final confirmData = DateTime(confirmacion.year, confirmacion.month, confirmacion.day);
      return confirmData.isAtSameMomentAs(diaData);
    });
    
    if (confirmado) {
      diasCompletados++;
    }
  }
  
  return {'completed': diasCompletados, 'total': totalDias};
}

// Simulaci√≥n del c√°lculo DESPU√âS de la correcci√≥n (fixed)
Map<String, int> calcularProgresoSemanalDespues(List<DateTime> historial, List<DateTime> fallos, DateTime hoy) {
  final inicioSemana = hoy.subtract(Duration(days: hoy.weekday - 1));
  final hoyData = DateTime(hoy.year, hoy.month, hoy.day);
  
  int diasCompletados = 0;
  int totalDias = 0;
  
  for (int i = 0; i < 7; i++) {
    final dia = inicioSemana.add(Duration(days: i));
    final diaData = DateTime(dia.year, dia.month, dia.day);
    
    if (diaData.isAfter(hoyData)) break;
    totalDias++;
    
    // NUEVA L√ìGICA (CORREGIDA): Verifica confirmaci√≥n Y ausencia de fallos posteriores
    final confirmado = historial.any((confirmacion) {
      final confirmData = DateTime(confirmacion.year, confirmacion.month, confirmacion.day);
      return confirmData.isAtSameMomentAs(diaData);
    });
    
    final tienefallosPosterior = fallos.any((fallo) {
      final falloData = DateTime(fallo.year, fallo.month, fallo.day);
      return falloData.isAfter(diaData) || falloData.isAtSameMomentAs(diaData);
    });
    
    // Solo cuenta si fue confirmado Y no hay fallos posteriores
    if (confirmado && !tienefallosPosterior) {
      diasCompletados++;
    }
  }
  
  return {'completed': diasCompletados, 'total': totalDias};
}
