void main() async {
  print('üß™ === TEST FLUJO COMPLETO RACHA RETROACTIVA ===');
  
  // Simular el flujo de add_counter_page.dart
  
  // 1. Simular la creaci√≥n del counter
  print('1Ô∏è‚É£ Simulando creaci√≥n de counter...');
  
  // Simular lista de counters existente
  List<dynamic> list = [
    {'title': 'ejercicio', 'startDate': '2025-07-25T00:00:00.000Z'},
    {'title': 'leer', 'startDate': '2025-07-28T00:00:00.000Z'},
  ];
  
  // Generar challengeId como en add_counter_page.dart
  final challengeId = 'challenge_${list.length}'; // Ser√≠a "challenge_2"
  print('   challengeId generado: $challengeId');
  
  // 2. Simular c√°lculo de d√≠as
  print('\n2Ô∏è‚É£ Simulando c√°lculo de d√≠as...');
  final now = DateTime.now();
  final today = DateTime(now.year, now.month, now.day);
  final startDate = DateTime(2025, 7, 28); // 28 de julio
  final start = DateTime(startDate.year, startDate.month, startDate.day);
  
  final daysPassed = today.difference(start).inDays + 1; // CORRECCI√ìN APLICADA
  print('   Fecha inicio: 28/07/2025');
  print('   Fecha hoy: ${today.day}/${today.month}/${today.year}');
  print('   D√≠as calculados: $daysPassed');
  
  // 3. Simular creaci√≥n de historial retroactivo
  print('\n3Ô∏è‚É£ Simulando historial retroactivo...');
  final backdatedHistory = <DateTime>[];
  for (int i = 0; i < daysPassed; i++) {
    final confirmDate = startDate.add(Duration(days: i));
    backdatedHistory.add(confirmDate);
  }
  
  print('   Historial creado: ${backdatedHistory.map((d) => '${d.day}/${d.month}').join(', ')}');
  
  // 4. Simular c√°lculo de racha (_calculateStreak)
  print('\n4Ô∏è‚É£ Simulando c√°lculo de racha...');
  
  // Obtener confirmaciones √∫nicas ordenadas (m√°s reciente primero)
  final uniqueConfirmations = <DateTime>{};
  for (final confirmation in backdatedHistory) {
    final normalizedDate = DateTime(confirmation.year, confirmation.month, confirmation.day);
    uniqueConfirmations.add(normalizedDate);
  }
  
  final sortedConfirmations = uniqueConfirmations.toList();
  sortedConfirmations.sort((a, b) => b.compareTo(a)); // M√°s reciente primero
  
  print('   Confirmaciones ordenadas: ${sortedConfirmations.map((d) => '${d.day}/${d.month}').join(', ')}');
  
  int calculatedStreak = 0;
  DateTime expectedDate = sortedConfirmations.first;
  
  for (final confirmDate in sortedConfirmations) {
    if (confirmDate.isAtSameMomentAs(expectedDate)) {
      calculatedStreak++;
      expectedDate = expectedDate.subtract(Duration(days: 1));
    } else {
      break;
    }
  }
  
  print('   Racha calculada: $calculatedStreak');
  
  // 5. Resultado final
  print('\nüéØ RESULTADO FINAL:');
  print('   challengeId: $challengeId');
  print('   D√≠as retroactivos: $daysPassed');
  print('   Racha aplicada: $calculatedStreak');
  print('   ¬øDeber√≠a mostrar racha inmediata?: ${calculatedStreak > 0 ? 'S√ç' : 'NO'}');
  
  if (calculatedStreak == daysPassed) {
    print('   ‚úÖ CORRECTO - La racha coincide con los d√≠as');
  } else {
    print('   ‚ùå ERROR - La racha no coincide');
  }
  
  print('\nüìã Instrucciones de debugging:');
  print('1. Abre la app y crea un reto con fecha 28/07/2025');
  print('2. Verifica en la consola estos logs:');
  print('   - "üîç challengeId: $challengeId"');
  print('   - "üîÑ Racha calculada por _calculateStreak: $calculatedStreak"');
  print('   - "üéâ ‚úÖ Reto retroactivo creado con racha calculada: $calculatedStreak d√≠as"');
  print('3. En la UI, busca el challengeId "$challengeId" y verifica que muestre $calculatedStreak d√≠as');
}
