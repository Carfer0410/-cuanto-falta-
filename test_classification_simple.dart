// Test puro de la funci√≥n de clasificaci√≥n sin dependencias de Flutter UI

import 'lib/notification_center_models.dart';

// Recreamos la funci√≥n desde notification_service.dart 
NotificationType _determineNotificationType(String title, String body) {
  final titleLower = title.toLowerCase();
  final bodyLower = body.toLowerCase();
  final fullText = '$titleLower $bodyLower'.toLowerCase();

  // NUEVO ORDEN: Retos tienen prioridad m√°xima
  // 1. CHALLENGE - Prioridad m√°xima para confirmar retos
  if (fullText.contains('confirmar') && 
      (fullText.contains('reto') || fullText.contains('challenge') || fullText.contains('h√°bito'))) {
    return NotificationType.challenge;
  }
  
  if (fullText.contains('ventana de confirmaci√≥n') || 
      fullText.contains('confirmation window')) {
    return NotificationType.challenge;
  }
  
  if (fullText.contains('√∫ltimos') && fullText.contains('minutos') && 
      (fullText.contains('confirmar') || fullText.contains('reto'))) {
    return NotificationType.challenge;
  }

  // 2. ACHIEVEMENT - Logros y rachas
  if (fullText.contains('¬°felicidades!') || fullText.contains('logro') || 
      fullText.contains('racha') || fullText.contains('achievement') ||
      fullText.contains('¬°incre√≠ble!') || fullText.contains('¬°excelente!')) {
    return NotificationType.achievement;
  }

  // 3. EVENT - Solo eventos espec√≠ficos SIN emojis de tiempo
  if ((fullText.contains('evento') || fullText.contains('event')) && 
      !fullText.contains('confirmar') && !fullText.contains('reto')) {
    return NotificationType.event;
  }

  // 4. Clasificaci√≥n por emoji - DESPU√âS de contenido espec√≠fico
  if (titleLower.contains('üèÜ') || titleLower.contains('üéâ') || titleLower.contains('‚ú®')) {
    return NotificationType.achievement;
  }

  if (titleLower.contains('üìÖ') && !fullText.contains('reto') && !fullText.contains('confirmar')) {
    return NotificationType.event;
  }

  // 5. MOTIVATION
  if (fullText.contains('motivaci√≥n') || fullText.contains('motivation') ||
      fullText.contains('√°nimo') || fullText.contains('keep going')) {
    return NotificationType.motivation;
  }

  // 6. PLANNING
  if (fullText.contains('planificaci√≥n') || fullText.contains('planning') ||
      fullText.contains('preparativo') || fullText.contains('strategy')) {
    return NotificationType.planning;
  }

  // 7. SYSTEM
  if (fullText.contains('sistema') || fullText.contains('system') ||
      fullText.contains('error') || fullText.contains('actualizaci√≥n')) {
    return NotificationType.system;
  }

  // 8. REMINDER
  if (fullText.contains('recordatorio') || fullText.contains('reminder') ||
      fullText.contains('no olvides')) {
    return NotificationType.reminder;
  }

  // 9. Default
  return NotificationType.general;
}

void main() {
  print('üß™ === PRUEBA DE CLASIFICACI√ìN CORREGIDA ===');
  
  // Casos de prueba espec√≠ficos
  final testCases = [
    {
      'title': '‚è∞ ¬°√öltimos 29 minutos!',
      'body': 'No olvides confirmar tu reto de meditaci√≥n antes de que termine el d√≠a. ¬°Ve a la pantalla de retos!',
      'expected': NotificationType.challenge,
      'description': 'Notificaci√≥n problem√°tica reportada por el usuario'
    },
    {
      'title': 'üîî Ventana de confirmaci√≥n abierta',
      'body': 'Tu ventana de confirmaci√≥n para retos est√° ahora disponible. ¬°No olvides confirmar tus h√°bitos!',
      'expected': NotificationType.challenge,
      'description': 'Ventana de confirmaci√≥n de retos'
    },
    {
      'title': 'üìÖ Evento pr√≥ximo',
      'body': 'Tu evento de trabajo est√° programado para ma√±ana a las 10:00 AM.',
      'expected': NotificationType.event,
      'description': 'Evento real de calendario'
    },
    {
      'title': '‚è∞ Recordatorio de tiempo',
      'body': 'Faltan 30 minutos para tu evento de reuni√≥n semanal.',
      'expected': NotificationType.event,
      'description': 'Recordatorio de evento sin menci√≥n de retos'
    },
    {
      'title': 'üèÜ ¬°Felicidades!',
      'body': 'Has alcanzado una racha de 7 d√≠as en meditaci√≥n.',
      'expected': NotificationType.achievement,
      'description': 'Logro de racha'
    },
    {
      'title': 'üéØ Motivaci√≥n diaria',
      'body': 'Recuerda que cada d√≠a es una oportunidad para mejorar. ¬°Sigue adelante!',
      'expected': NotificationType.motivation,
      'description': 'Mensaje motivacional'
    },
    {
      'title': 'üìã Planificaci√≥n',
      'body': 'Es hora de revisar tus preparativos para la semana siguiente.',
      'expected': NotificationType.planning,
      'description': 'Recordatorio de planificaci√≥n'
    },
    {
      'title': 'üîß Sistema',
      'body': 'Actualizaci√≥n del sistema completada exitosamente.',
      'expected': NotificationType.system,
      'description': 'Notificaci√≥n del sistema'
    }
  ];
  
  bool allPassed = true;
  int testNumber = 1;
  
  for (final testCase in testCases) {
    final result = _determineNotificationType(
      testCase['title'] as String, 
      testCase['body'] as String
    );
    final expected = testCase['expected'] as NotificationType;
    final passed = result == expected;
    
    if (!passed) allPassed = false;
    
    final status = passed ? '‚úÖ PASS' : '‚ùå FAIL';
    print('\n$testNumber. $status - ${testCase['description']}');
    print('   T√≠tulo: "${testCase['title']}"');
    print('   Resultado: $result');
    print('   Esperado: $expected');
    
    if (!passed) {
      print('   üö® CLASIFICACI√ìN INCORRECTA');
    }
    
    testNumber++;
  }
  
  print('\n' + '='*50);
  if (allPassed) {
    print('üéâ ¬°TODOS LOS TESTS PASARON! (${ testCases.length }/8)');
    print('‚úÖ La notificaci√≥n problem√°tica ahora se clasifica correctamente como CHALLENGE');
  } else {
    print('‚ùå Algunos tests fallaron');
  }
  print('='*50);
}
